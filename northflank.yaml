apiVersion: v1
services:
  # PostgreSQL Database
  videostack-db:
    name: videostack-db
    type: postgres
    version: "15"
    region: auto
    disk:
      size: 10Gi
      type: SSD
    environment:
      POSTGRES_DB: videostack
      POSTGRES_USER: videostack_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - port: 5432
        protocol: TCP
        public: false
    healthCheck:
      port: 5432
      method: POSTGRES

  # Backend API Service
  videostack-backend:
    name: videostack-backend
    type: service
    region: auto
    build:
      dockerfile: |
        # Multi-stage build for production
        FROM python:3.11-slim as builder

        # Install system dependencies for building
        RUN apt-get update && apt-get install -y \
            gcc \
            && rm -rf /var/lib/apt/lists/*

        # Set working directory
        WORKDIR /app

        # Copy requirements first for better layer caching
        COPY requirements.txt .

        # Install Python dependencies
        RUN pip install --no-cache-dir --user -r requirements.txt

        # Production stage
        FROM python:3.11-slim

        # Install runtime system dependencies
        RUN apt-get update && apt-get install -y \
            curl \
            && rm -rf /var/lib/apt/lists/*

        # Create non-root user for security
        RUN groupadd -r appuser && useradd -r -g appuser appuser

        # Copy installed packages from builder stage
        COPY --from=builder /root/.local /home/appuser/.local

        # Set working directory
        WORKDIR /app

        # Copy application code
        COPY . .

        # Change ownership of the app directory
        RUN chown -R appuser:appuser /app

        # Switch to non-root user
        USER appuser

        # Add local bin to PATH
        ENV PATH="/home/appuser/.local/bin:${PATH}"

        # Expose port
        EXPOSE 8000

        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
            CMD curl -f http://localhost:8000/health || exit 1

        # Start command with proper configuration
        CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4", "--loop", "uvloop", "--http", "h11"]
    deployment:
      replicas: 2
      healthCheck:
        port: 8000
        method: HTTP
        path: /health
        headers:
          - name: User-Agent
            value: Northflank-HealthCheck
      environment:
        # Database configuration
        DATABASE_URL: postgresql://videostack_user:${DB_PASSWORD}@videostack-db:5432/videostack

        # Application configuration
        PORT: "8000"
        HOST: "0.0.0.0"

        # External API keys (these should be set as secrets in Northflank dashboard)
        WORKOS_CLIENT_ID: ${WORKOS_CLIENT_ID}
        WORKOS_API_KEY: ${WORKOS_API_KEY}
        OPENAI_API_KEY: ${OPENAI_API_KEY}
        GROQ_API_KEY: ${GROQ_API_KEY}
        RUNWARE_API_KEY: ${RUNWARE_API_KEY}

        # Production settings
        ENVIRONMENT: production
        LOG_LEVEL: INFO

        # CORS settings for production
        CORS_ORIGINS: ${CORS_ORIGINS:-https://yourdomain.com}

      ports:
        - port: 8000
          protocol: HTTP
          public: true
          domain:
            - name: api.yourdomain.com  # Replace with your actual domain

      volumes:
        - name: app-storage
          size: 5Gi
          mountPath: /app/storage

      resources:
        cpu: 1000m
        memory: 2Gi

    dependsOn:
      - videostack-db

# Environment variables and secrets configuration
# These should be configured in the Northflank dashboard or via CLI
# The values below are examples and should be replaced with actual values

# secrets:
#   DB_PASSWORD:
#     description: "Database password for PostgreSQL"
#     sensitive: true
#   WORKOS_CLIENT_ID:
#     description: "WorkOS Client ID"
#     sensitive: true
#   WORKOS_API_KEY:
#     description: "WorkOS API Key"
#     sensitive: true
#   OPENAI_API_KEY:
#     description: "OpenAI API Key"
#     sensitive: true
#   GROQ_API_KEY:
#     description: "Groq API Key"
#     sensitive: true
#   RUNWARE_API_KEY:
#     description: "Runware API Key"
#     sensitive: true
